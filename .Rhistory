x <- 5
y <- 3
x+y
print(args)
args = commandArgs(trailingOnly=TRUE)
print(args)
args <- commandArgs()
print(args)
Rscript test_args.R Hello R
print(args)
Rscript test_args.R Hello R
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
iter <- 12
try(if(iter > 10) stop("too many iterations"))
tst1 <- function(...) stop("dummy error")
try(tst1(1:10, long, calling, expression))
tst2 <- function(...) stop("dummy error", call. = FALSE)
try(tst2(1:10, longcalling, expression, but.not.seen.in.Error))
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv")
}
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=TRUE)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=TRUE)
}
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
# get input & output path
f_in <- NA
f_out <- NA
print(f_in)
print(f_out)
print(f_out)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
print(f_in)
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
print(f_in)
sink()
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
# get input & output path
f_in <- NA
f_out <- NA
print(f_in)
print(f_out)
sink()
closeAllConnections()
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
# get input & output path
f_in <- NA
f_out <- NA
print(f_in)
print(f_out)
sink()
closeAllConnections()
nflips <- 100
nheads <- c(25)
print(nheads)
nflips <- 50
nheads <- 25
print(nheads)
P(X>nheads)
#P(X>nheads)
right.tail <- pbinom(nheads, nflips, 0.5, lower.tail=F)
sprintf("%2.2f", right.tail)
nflips <- 50
nheads <- c(25, 45, 50, 60)
print(nheads)
#P(X>nheads)
right.tail <- pbinom(nheads, nflips, 0.5, lower.tail=F)
sprintf("%2.2f", right.tail)
nheads <- 25
print(nheads)
#P(X>nheads)
right.tail <- pbinom(nheads, nflips, 0.5, lower.tail=F)
sprintf("%2.2f", right.tail)
qchisq(0.95, df = 4)
qchisq(0.05, df = 4)
Rscript hw2_111971006.R --target bad --badthre 0.5 --input examples/method1.csv examples/method2.csv --output examples/output1.csv
hw2_yourID.R --target bad --badthre 0.5 --input examples/method1.csv examples/method2.csv --output examples/output1.csv
estimate(0.045,0.003,0.06)
estimate <- function(targetRate,difference,errorProb)
estimate(0.045,0.003,0.06)
print(m)
m <- estimate(0.045,0.003,0.06)
print(m)
estimate <- function(targetRate,difference,errorProb)
m <- estimate(0.045,0.003,0.06)
print(m)
estimate <- function(targetRate,difference,errorProb) {
ceiling(-log(errorProb)*targetRate/(difference^2))
}
(est <- estimate(0.045,0.004,0.05))
(est1 <- estimate(0.045,0.005,0.04))
est2 <- estimate(0.045,0.005,0.04))
(est2 <- estimate(0.045,0.005,0.04))
(est2 <- estimate(0.045,0.003,0.06))
Rscript hw3_studentID.R --fold k --input Archaeal_tfpssm.csv --output performance.csv
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("USAGE: Rscript hw3_studentID.R --fold k --input Archaeal_tfpssm.csv --output performance.csv", call.=FALSE)
}
Rscript hw3_111971006.R --fold k --input Archaeal_tfpssm.csv --output performance.csv
?head
?rpart
??rpart
library(shiny)
library(ggvis)
# ui
shinyUI(pageWithSidebar(
div(),
sidebarPanel(
sliderInput("n", "Number of points", min = 1, max = nrow(mtcars),
value = 10, step = 1),
uiOutput("plot_ui")
),
mainPanel(
ggvisOutput("plot"),
tableOutput("mtc_table")
)
))
# server
shinyServer(function(input, output, session) {
# A reactive subset of mtcars
mtc <- reactive({ mtcars[1:input$n, ] })
# A simple visualisation. In shiny apps, need to register observers
# and tell shiny where to put the controls
mtc %>%
ggvis(~wt, ~mpg) %>%
layer_points() %>%
bind_shiny("plot", "plot_ui")
output$mtc_table <- renderTable({
mtc()[, c("wt", "mpg")]
})
})
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
library(ggbiplot)
# ui
shinyUI(pageWithSidebar(
div(),
sidebarPanel(
sliderInput("n", "Number of points", min = 1, max = nrow(mtcars),
value = 10, step = 1),
uiOutput("plot_ui")
),
mainPanel(
ggvisOutput("plot"),
tableOutput("mtc_table")
)
))
runApp('Documents/GitHub/hw4-ic-htchen')
install.packages("ggbiplot")
runApp('Documents/GitHub/hw4-ic-htchen')
runApp('Documents/GitHub/hw4-ic-htchen')
shiny::runApp()
